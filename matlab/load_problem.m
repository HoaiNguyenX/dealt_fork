function load_problem(C, problem, out_path, o, l, varargin)
% Evaluate the data generated by deal.t for a specific problem. The input
% arguments are as follows
%   C           -- A cell array containing strings. Each string relates to
%                  data to be evaluated.
%   problem     -- The problem to be loaded specified as path
%   out_path    -- Save outputs to specified path
%   o           -- specify the degree of Tsplines used for the problem
%   l           -- specify a level of the mesh to be loaded
%   varargin    -- optional fig_no argument, if different figures are to be
%                  created
%
% The options for C are as follows
%   sparsity_pattern    -- load the sparsity pattern of the system
%                          matrix at a given degree and level
%   control_grid        -- plot the control grid of the problem. This is
%                          hard-coded for the problems considered in the
%                          deal.t examples.
%   solution            -- Plot and output the numerical_solution on the
%                          domain
%   physical_grid       -- Plot and output the physical grid for the given
%                          problem
%   real_solution       -- Plot the real solution of the considered problem
%   cell_error          -- Loads the cell-wise error of the specified
%                          problem and outputs it
%   grid                -- Plot the parametric grid of the specified
%                          problem. Note, that this is not the mesh on the
%                          physical domain
%   physical_grid       -- Print the physical grid of the specified problem
%                          and output it.  For fine meshes, this takes a
%                          long time, as each line-segment is plotted with
%                          10 points in-between its end-points to get the
%                          approximate curvature of the modelled domain.
%   physical_bezier_grid-- Same as above, but with T-junction extensions,
%                          aka the Bezier mesh
%   knot_vector         -- Do not use this. It is hard-coded to print two
%                          T-spline knot vectors in a very special case
%   solution            -- Plot the numerical solution of the specified
%                          problem
%   spline              -- Do not use this. It plots two T-splines
%                          specified for a special case or if the indices
%                          exceed the number of T-splines, it plots the
%                          "middle" T-splines.
%   all_splines         -- Consecutively plots each T-spline. The last
%                          T-splines is printed
%
% Written by: Robin Hiniborch (hiniborch at ifam.uni-hannover.de)
%% Load parameters

% define path
path = [problem 'o' num2str(o) '/l' num2str(l)];
% path = [problem 'o' num2str(o) '/00svg/l' num2str(l)];

if isempty(varargin)
    fig_no = 1;
    dim = 1;
else
    if length(varargin) == 1
        fig_no        = varargin{1};
        problem_dim   = 1;
        space_dim     = 2;
    elseif length(varargin) == 2
        fig_no = varargin{1};
        problem_dim      = varargin{2};
        space_dim        = problem_dim;
    elseif length(varargin) == 3
        fig_no = varargin{1};
        problem_dim      = varargin{2};
        space_dim        = varargin{3};
    end
end

for i = 1:length(C)
    f = figure(fig_no); fig_no = fig_no + 1; hold on;
    % f.WindowStyle = 'docked';
    plot_data(C{i}, path, problem_dim, space_dim);
    if ~isempty(out_path)
        print_figure(f, out_path, C{i})
    else
        h = axes(f, 'visible', 'off');
        title(h, C{i}, 'FontSize', 50)
        % colorbar
    end
end


end % main

function plot_data(c, path, problem_dim, space_dim)

% Load a proper colormap
cmap = load('smooth-cool-warm.dat') / 255;

% Load LUH-colors for plots
luh_colors;
switch space_dim
    case 2
        N1 = 100; N2 = 100; N3 = 1;
    case 3
        N1 = 50; N2 = 25; N3 = 10;
end

lw = 2;
switch c
    case 'sparsity_pattern'
        sp_f = [path '_sp.dat'];
        fid = fopen(sp_f);
        
        tline = fgetl(fid);
        
        non_sparse = [];
        while ischar(tline)
            % Remove brackets:
            tline(1) = []; tline(end) = [];
            
            % Split line at commas
            C = strsplit(tline, ',');
            a = zeros(length(C), 1);
            
            % Convert strings to numbers
            for k = 1:length(C)
                a(k) = str2double(C{k}) + 1;
            end
            
            % Get indices of non-zero entries
            non_sparse(end+1, a(2:end)) = 1;
            
            % Get next line
            tline = fgetl(fid);
        end
        sp = sparse(non_sparse);
        spy(sp);
        title(['DoFs: ' num2str(size(non_sparse, 1))])
        
        fclose(fid);
    case 'cell_error'
        %         Omega_f = [path '_physical_grid.dat'];
        %         loadGrid(load(Omega_f), 'Color', [0 0 0], 'LineWidth', lw); hold on;
        
        %
        %
        % Load cell errors
        error_f = [path '_cell_error.dat'];
        error = load(error_f);
        
        % Load evals
        evals_f = [path '_cell_error_evals.dat'];
        evals = load(evals_f);
        evals_x = evals(:, 1);
        evals_y = evals(:, 2);
        
        % Load data
        data_f = [path '_data.dat'];
        data = load(data_f);
        
        % reshape to fit data structure
        error = reshape(error, data([2 3 1]));
        evals_x = reshape(evals_x, data([2 3 1]));
        evals_y = reshape(evals_y, data([2 3 1]));
        
        % Plot error cell-wise
        for ce = 1:data(1)
            contourf(evals_x(:, :, ce), evals_y(:, :, ce), error(:, :, ce), 'EdgeColor', 'none'); hold on;
        end
        colormap(cmap(:, 2:4)); hold off;
        set(gca,'ColorScale','log')
    case 'grid'
        Omega_f = [path '_parametric_mesh.txt'];
        plot_from_mesh_file(Omega_f, 'Color', [0 0 0], 'LineWidth', lw);
    case 'knot_vector'
        % See case 'spline'
        warning('Printing knot vector ray tracing for specific TSpline. Adjust this for any new case!')
        
        % Plot the parametric mesh
        Omega_f = [path '_parametric_mesh.txt'];
        plot_from_mesh_file(Omega_f, 'Color', [0 0 0], 'LineWidth', lw); hold on;
        
        % Plot Ray-tracing
        anchor_x = [0.1875, 0.25;...
            0.4375, 0.50];
        anchor_y = [0.1875, 0.25;...
            0.6250, 0.75];
        
        kv_x = [0.125 0.1875 0.25 0.3125; ...
            0.375 0.4375 0.5 0.5625];
        kv_y = [0.125 0.1875 0.25 0.375;...
            0.5   0.625  0.75 0.875];
        
        plot(kv_x', (mean(anchor_y, 2) .* ones(size(kv_x)))', ...
            'LineStyle', ':', ...
            'Color', LUH_red, ...
            'Marker', 'x', ...
            'MarkerSize', 5 * lw, ...
            'LineWidth', lw);
        plot((mean(anchor_x, 2) .* ones(size(kv_y)))', kv_y', ...
            'LineStyle', ':', ...
            'Color', LUH_red, ...
            'Marker', 'x', ...
            'MarkerSize', 5 * lw, ...
            'LineWidth', lw);
        hold off;
    case 'physical_grid'
        Omega_f = [path '_physical_grid.dat'];
        loadGrid(load(Omega_f), 'Color', [0 0 0], 'LineWidth', lw);
    case 'physical_mesh'
        Omega_f = [path '_physical_mesh.txt'];
        plot_from_mesh_file(Omega_f, 'Color', [0 0 0], 'LineWidth', lw); hold on;
    case 'physical_bezier_grid'
        Omega_fb = [path '_physical_bezier_grid.dat'];
        Omega_f  = [path '_physical_grid.dat'];
        Tria_bezier = load(Omega_fb);
        loadGrid(Tria_bezier(1:2:end, :), 'Color', LUH_red  , 'LineStyle', '-', 'LineWidth', lw); hold on
        loadGrid(load(Omega_f) , 'Color', [0, 0, 0], 'LineStyle', '-', 'LineWidth', lw);
    case 'solution'
        uh_f = [path '_sol.dat'];
        uh = load(uh_f);
        
        % Omega_f  = [path '_physical_grid.dat'];
        % Omega_fb = [path '_physical_bezier_grid.dat'];
        switch space_dim
            case 2
                Phi_f = [path  '_IPF2d.dat'];
                Phi = load(Phi_f);
            case 3
                Phi_f = [path  '_IPF3d.dat'];
                Phi = load(Phi_f);
            otherwise
                return;
        end     
        
        switch problem_dim
            case 1
                B_f = [path  '_splines.dat'];
                B = load(B_f);
                N3 = 10; 
                ut = reshape(B * uh', N1, N2, N3);
                
                ax = findobj(gcf, 'type', 'axes');
                plot_solution(Phi, ut, N1, N2, N3, ax);
            case 2
                B_fx = [path  '_d0_splines.dat'];
                B_fy = [path  '_d1_splines.dat'];
                Bx = load(B_fx);
                By = load(B_fy);
                
                utx = reshape(Bx * uh', N1, N2, N3);
                uty = reshape(By * uh', N1, N2, N3);
                
                ax = subplot(2, 1, 1);
                plot_solution(Phi, utx, N1, N2, N3, ax);
                
                ax = subplot(2, 1, 2);
                plot_solution(Phi, uty, N1, N2, N3, ax);
            case 3
                B_fx = [path  '_d0_splines.dat']; N3 = 20;
                B_fy = [path  '_d1_splines.dat'];
                B_fz = [path  '_d2_splines.dat'];
                Bx = load(B_fx);
                By = load(B_fy);
                Bz = load(B_fz);
                
                utx = reshape(Bx * uh', N1, N2, N3);
                uty = reshape(By * uh', N1, N2, N3);
                utz = reshape(Bz * uh', N1, N2, N3);
                
                minColorLimit = min([min(min(min(utx))) min(min(min(uty))) min(min(min(utz))) ]);
                maxColorLimit = max([max(max(max(utx))) max(max(max(uty))) max(max(max(utz))) ]);

                sp1 = subplot(3, 1, 1, 'Parent', gcf);
                plot_solution(Phi, utx, N1, N2, N3, sp1);
                title('$$\mathbf{u}_x$$', 'Interpreter', 'latex', 'FontSize', 25);
                
                sp2 = subplot(3, 1, 2, 'Parent', gcf);
                plot_solution(Phi, uty, N1, N2, N3, sp2);
                title('$$\mathbf{u}_y$$', 'Interpreter', 'latex', 'FontSize', 25);
                
                
                sp3 = subplot(3, 1, 3, 'Parent', gcf);
                plot_solution(Phi, utz, N1, N2, N3, sp3) %, minColorLimit, maxColorLimit);
                title('$$\mathbf{u}_z$$', 'Interpreter', 'latex', 'FontSize', 25);

%                 h = axes(gcf, 'visible', 'off');
%                 c = colorbar(h, 'Position', [0.96 0.168 0.012 0.7]);
%                 caxis(h, [minColorLimit maxColorLimit]);
            otherwise
        end
       
        
    case 'spline'
        B_f = [path  '_splines.dat'];
        B = load(B_f);
        N = [80 37];
        for i = 1:length(N)
            try
                Bi = reshape(B(:, N(i) + 1), N1, N2);
            catch
                n = floor((1+size(B, 2))/2);
                Bi = reshape(B(:, n), N1, N2);
            end
            
            evals = load([path '_evals.dat' ]);
            evals_x = reshape(evals(:, 1), N1, N2);
            evals_y = reshape(evals(:, 2), N1, N2);
            
            % Get indices i_min, i_max, j_min, j_max
            I = find(sum(Bi ~= 0, 2) ~= 0);
            J = find(sum(Bi ~= 0, 1) ~= 0);
            imin = I(1); imax = I(end)-1;
            jmin = J(1); jmax = J(end)+1;
            
            evals_x([1:imin-1, imax+1:end], :) = [];
            evals_x(:, [1:jmin-1, jmax+1:end]) = [];
            evals_y([1:imin-1, imax+1:end], :) = [];
            evals_y(:, [1:jmin-1, jmax+1:end]) = [];
            Bi([1:imin-1, imax+1:end], :) = [];
            Bi(:, [1:jmin-1, jmax+1:end]) = [];
            
            
            
            contourf(evals_x, evals_y, Bi, 'EdgeColor', 'none');
            hold on;
        end
        Omega_f = [path '_parametric_mesh.txt'];
        plot_from_mesh_file(Omega_f, 'Color', [0 0 0], 'LineWidth', lw); hold off;
        colormap(cmap(:, 2:4));
    case 'all_splines'
        B_f = [path  '_splines.dat'];
        B = load(B_f);
        
        for n = 1:size(B, 2)
            Bi = reshape(B(:, n), N1, N2);
            
            evals = load([path '_evals.dat' ]);
            evals_x = reshape(evals(:, 1), N1, N2);
            evals_y = reshape(evals(:, 2), N1, N2);
            
            % Get indices i_min, i_max, j_min, j_max
            I = find(sum(Bi ~= 0, 2) ~= 0);
            J = find(sum(Bi ~= 0, 1) ~= 0);
            imin = I(1); imax = I(end)+1;
            jmin = J(1); jmax = J(end)+1;
            
            evals_x([1:imin-1, imax+1:end], :) = [];
            evals_x(:, [1:jmin-1, jmax+1:end]) = [];
            evals_y([1:imin-1, imax+1:end], :) = [];
            evals_y(:, [1:jmin-1, jmax+1:end]) = [];
            Bi([1:imin-1, imax+1:end], :) = [];
            Bi(:, [1:jmin-1, jmax+1:end]) = [];
            
            
            
            contourf(evals_x, evals_y, Bi, 'EdgeColor', 'none'); hold on;
            Omega_f = [path '_parametric_mesh.txt'];
            plot_from_mesh_file(Omega_f); hold off;
            colormap(cmap(:, 2:4));
            drawnow;
            pause(1);
        end
    otherwise
        return;
end % switch
end % initialize_plot

function plot_solution(Phi, u, N1, N2, N3, ax, varargin)

if nargin > 6
    minColorLimit = varargin{1};
    maxColorLimit = varargin{2};
end

space_dimension = size(Phi, 2); 
Phix = reshape(Phi(:, 1), N1, N2, N3);
Phiy = reshape(Phi(:, 2), N1, N2, N3); 
if space_dimension == 3
    Phiz = reshape(Phi(:, 3), N1, N2, N3);
    for z = 1:N3
        surf(ax, Phix(:, :, z), Phiy(:, :, z), Phiz(:, :, z), u(:, :, z), 'EdgeColor', 'none'); hold on;
    end
    colorbar;
    view([1 1 1]);
else 
    contourf(ax, Phix, Phiy, u, 'EdgeColor', 'none'); hold on;
end
if nargin > 6
    caxis(ax, [minColorLimit, maxColorLimit]);
end

grid on;  hold off; 
cmap = load('smooth-cool-warm.dat') / 255;
colormap(cmap(:, 2:4));

end % plot_solution

function plot_from_mesh_file(name, varargin)

error(nargchk(1,inf,nargin,'struct'));
if nargin == 1
    varargin = {'Color', 'black', 'LineWidth', 2.5};
end


fid = fopen(name);
GridData = textscan(fid, '%f %f %f %f %f' ,1 , 'delimiter', '\n', 'headerlines', 0);
n_vertices_per_cell     = GridData{1};
n_cells                 = GridData{2};
n_vertices_total        = GridData{3};
solution_dimension      = GridData{4};
% physical_dimension      = GridData{5};
physical_dimension = 2;

% Extract Cell data
C = zeros(n_cells, n_vertices_per_cell);
fseek(fid,0,'bof');
if n_vertices_per_cell == 4
    c = textscan(fid, '%f %f %f %f', n_cells, 'delimiter', ' ', 'headerlines', 1);
else
    c = textscan(fid, '%f %f %f %f %f %f %f %f', n_cells, 'delimiter', ' ', 'headerlines', 1);
end

for i = 1:n_vertices_per_cell
    C(:, i) = c{i};
end

% Extract Vertex Data
V = zeros(n_vertices_total, physical_dimension);
fseek(fid,0,'bof');
if physical_dimension == 2
    f = textscan(fid, '%f %f', n_vertices_total, 'delimiter', ' ', 'headerlines', 1 + n_cells);
else
    f = textscan(fid, '%f %f %f', n_vertices_total, 'delimiter', ' ', 'headerlines', 1 + n_cells);
end
for i = 1:physical_dimension
    V(:, i) = f{i};
end

if solution_dimension ~= 0
    CM = zeros(n_vertices_total, solution_dimension);
    fseek(fid, 0, 'bof');
    if physical_dimension == 1
        cm = textscan(fid, '%f', n_vertices_total, 'delimiter', ' ', 'headerlines', 1 + n_cells + n_vertices);
    elseif physical_dimension == 2
        cm = textscan(fid, '%f %f', n_vertices_total, 'delimiter', ' ', 'headerlines', 1 + n_cells + n_vertices);
    else
        cm = textscan(fid, '%f %f %f', n_vertices_total, 'delimiter', ' ', 'headerlines', 1 + n_cells + n_vertices);
    end
    for i = 1:solution_dimension
        CM(:, i) = cm{i};
    end
end

quadplot(C+1, V(:, 1), V(:, 2), varargin{1:end})

end % plot_from_mesh_file

function print_figure(fig, out_path, name)

% Open current figure
figure(fig);

% Ensure Window is not docked
fig.WindowStyle = 'normal';

switch name
    case 'cell_error'
        xi = true;
    case 'grid'
        xi = true;
    case 'physical_grid'
        xi = false;
    case 'physical_bezier_grid'
        xi = false;
    case 'solution'
        xi = false;
    case 'spline'
        xi = true;
    otherwise
        xi = true;
end % switch

fs = 50;
if ~strcmp(name, 'sparsity_pattern')
    if xi
        xlabel('$$\xi_x$$', ...
            'Fontsize', fs, ...
            'Interpreter', 'latex',...
            'Color', 'black')
        ylabel('$$\xi_y$$', ...
            'Fontsize', fs, ...
            'Interpreter', 'latex',...
            'Color', 'black')
    else
        xlabel('$$x$$', ...
            'Fontsize', fs, ...
            'Interpreter', 'latex', ...
            'Color', 'black')
        ylabel('$$y$$', ...
            'Fontsize', fs, ...
            'Interpreter', 'latex',...
            'Color', 'black')
    end
else
    set(gca, 'FontSize', fs/2);
end

set(gca, 'XTickLabel', []);
set(gca, 'YTickLabel', []);
set(gca, 'xtick', []);
set(gca, 'ytick', []);


% Set position of figure
if ~strcmp(name, 'sparsity_pattern')
    % 	fig.Position = [2792 101 996 1073];
    fig.Position = [644 2 1665 1306];
else
    fig.Position = [577 239 1064 864];
end

% Get figure as matrix
frame        = getframe(fig);
im           = frame2im(frame);

% Set background to match block background on poster
% background = 230;
background = 255;
% im(repmat(all(im == 38, 3), 1, 1, 3)) = background;
im(repmat(all(im == 240, 3), 1, 1, 3)) = background;
% im(repmat(all(im == 255, 3), 1, 1, 3)) = background;
[imind, cm]  = rgb2ind(im, 256);

imwrite(imind, cm, [out_path name '.png'], 'png');

end % print_figure